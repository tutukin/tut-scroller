{"version":3,"file":"tut-scroller.min.js","sources":["../../src/js/tutScrollerDirective.js"],"names":["angular","module","directive","$compile","$templateCache","$window","PM","Scroller","link","scope","iElement","iAttrs","controller","transcludeFn","selectItem","target","item","element","_linkItems","collection","items","forEach","i","el","_getItemTemplate","addClass","wrapper","append","scroller","addItem","index","itemScope","$new","itemTemplate","find","viewport","windowWidth","width","getItemSize","showItemAt","hideItem","tutScrollerTemplate","get","defaultTemplateHtml","css","$watch","a","b","addEventListener","w","setWindowWidth","pointer","attachTo","clickThreshold","Math","floor","itemWidth","onmove","s","scroll","onclick","on","ev","getMeanItemWidth","autoscroll","Date","now","hasClass","left","removeClass","restrict","template"],"mappings":"AAAAA,QAAQC,OAAO,eAAeC,UAAU,eACvC,WAAY,iBAAkB,UAAW,mBAAoB,WAC9D,SAAUC,EAAUC,EAAgBC,EAASC,EAAIC,GAG7C,QAASC,GAAMC,EAAOC,EAAUC,EAAQC,EAAYC,GAmChD,QAASC,GAAYC,GACjB,GAAIC,GAAOhB,QAAQiB,QAAQF,GAAQN,QAAQO,IAE3CP,GAAMK,YACFE,KAAOA,IAcf,QAASE,KACL,GAAIC,GAAaV,EAAMW,SAEvBpB,SAAQqB,QAAQF,EAAY,SAAUH,EAAMM,GACxC,GAAIC,GAAKC,EAAiBR,EAAMM,EAChCC,GAAGE,SAAS,QACZC,EAAQC,OAAOJ,GACfK,EAASC,QAAQN,KAIzB,QAASC,GAAkBR,EAAMc,GAC7B,GAAIC,GAAYtB,EAAMuB,MAAK,EAC3BD,GAAUf,KAAOA,EACjBe,EAAUD,MAAQA,CAElB,IAAIP,GAAKpB,EAAS8B,GAAcF,EAEhC,OAAOR,GAtEX,GAAIG,GAAUhB,EAASwB,KAAK,UACxBC,EAAWzB,EAASwB,KAAK,WAEzBN,EAAW,GAAIrB,GAASA,UACxB6B,YAAgBD,EAASE,QACzBC,YAAgBA,EAChBC,WAAgBA,EAChBC,SAAgBA,IAGhBP,EAAetB,EAAO8B,oBACtBrC,EAAesC,IAAI/B,EAAO8B,qBAC1BE,CAEJjC,GAASe,SAAS,gBAClBf,EAASkC,IAAI,WAAY,YAEzBnC,EAAMoC,OAAO,QAAS,SAAUC,EAAGC,GAC/B7B,MAGJb,EAAQ2C,iBAAiB,SAAU,WAGjC,GAAIC,GAAId,EAASE,OACjBT,GAASsB,eAAeD,IAG1B,IAAIE,GAAU7C,EAAG8C,SAAS1B,GACtB2B,eAAgBC,KAAKC,MAAM,IAAO9C,EAAM+C,YAAc,EACtDC,OAAQ,SAAiBC,GAAK9B,EAAS+B,OAAOD,IAC9CE,QAAQ9C,GAWZJ,GAASwB,KAAK,eAAe2B,GAAG,QAAS,SAAUC,GAC/C,GAAIb,GAAIrB,EAASmC,kBACjBZ,GAAQa,YAAYf,EAAGgB,KAAKC,SAGhCxD,EAASwB,KAAK,gBAAgB2B,GAAG,QAAS,SAAUC,GAChD,GAAIb,GAAIrB,EAASmC,kBACjBZ,GAAQa,WAAWf,EAAGgB,KAAKC,SA0BnC,QAAS1B,GAAUjB,GACRA,EAAG4C,SAAS,WACf5C,EAAGE,SAAS,UAIpB,QAASc,GAAY6B,EAAM7C,GACvBA,EAAG8C,YAAY,UACf9C,EAAGqB,IAAI,OAAQ,GAAKwB,EAAO,MAG/B,QAAS9B,GAAaf,GAClB,MAAOA,GAAGc,QA1Fd,GAAIM,GAAsB,kCAgG1B,QACI2B,SAAY,IACZ9D,KAAYA,EACZC,OACIW,MAAY,eACZN,WAAY,sBAEhByD,SACI","sourcesContent":["angular.module('tutScroller').directive('tutScroller',\n['$compile', '$templateCache', '$window', 'PointerMovements', 'Scroller',\nfunction ($compile, $templateCache, $window, PM, Scroller) {\n    var defaultTemplateHtml = '<div class=\"item\">{{item}}</div>';\n\n    function link (scope, iElement, iAttrs, controller, transcludeFn) {\n        var wrapper = iElement.find('.items');\n        var viewport = iElement.find('.window');\n\n        var scroller = new Scroller.Scroller({\n            windowWidth:    viewport.width(),\n            getItemSize:    getItemSize,\n            showItemAt:     showItemAt,\n            hideItem:       hideItem\n        });\n\n        var itemTemplate = iAttrs.tutScrollerTemplate ?\n            $templateCache.get(iAttrs.tutScrollerTemplate) :\n            defaultTemplateHtml;\n\n        iElement.addClass('tut-scroller');\n        iElement.css('position', 'relative');\n\n        scope.$watch('items', function (a, b) {\n            _linkItems();\n        });\n\n        $window.addEventListener('resize', function () {\n          // FIXME: check if windowWidth has changed\n          // FIXME: use requestAnimationFrame to defer DOM manipulations\n          var w = viewport.width();\n          scroller.setWindowWidth(w);\n        });\n\n        var pointer = PM.attachTo(wrapper, {\n            clickThreshold: Math.floor(0.05 * scope.itemWidth) || 8, // Fixme: scope.itemWidth is not available right now\n            onmove: function _shift (s) { scroller.scroll(s); },\n            onclick:selectItem\n        });\n\n        function selectItem (target) {\n            var item = angular.element(target).scope().item;\n\n            scope.selectItem({\n                item : item\n            });\n        }\n\n        iElement.find('a.move-left').on('click', function (ev) {\n            var w = scroller.getMeanItemWidth();\n            pointer.autoscroll(-w, Date.now());\n        });\n\n        iElement.find('a.move-right').on('click', function (ev) {\n            var w = scroller.getMeanItemWidth();\n            pointer.autoscroll(w, Date.now());\n        });\n\n        function _linkItems () {\n            var collection = scope.items || [];\n\n            angular.forEach(collection, function (item, i) {\n                var el = _getItemTemplate(item, i);\n                el.addClass('item');\n                wrapper.append(el);\n                scroller.addItem(el);\n            });\n        }\n\n        function _getItemTemplate (item, index) {\n            var itemScope = scope.$new(true);\n            itemScope.item = item;\n            itemScope.index = index;\n\n            var el = $compile(itemTemplate)(itemScope);\n\n            return el;\n        }\n    }\n\n\n    function hideItem (el) {\n        if ( ! el.hasClass('hidden') ) {\n            el.addClass('hidden');\n        }\n    }\n\n    function showItemAt (left, el) {\n        el.removeClass('hidden');\n        el.css('left', '' + left + 'px');\n    }\n\n    function getItemSize (el) {\n        return el.width();\n    }\n\n\n\n\n    return {\n        restrict:   'A',\n        link:       link,\n        scope:      {\n            items:      '=tutScroller',\n            selectItem: '&tutScrollerSelect'\n        },\n        template:\n            '<div class=\"window\">' +\n                '<div class=\"items\"></div>' +\n            '</div>' +\n            '<a href=\"#\" class=\"move-right\"><span class=\"icon\"></span></a>' +\n            '<a href=\"#\" class=\"move-left\"><span class=\"icon\"></span></a>'\n    };\n}]);\n"]}